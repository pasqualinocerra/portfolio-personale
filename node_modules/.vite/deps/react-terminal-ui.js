import {
  __toESM,
  require_react
} from "./chunk-2YIMICFJ.js";

// node_modules/react-terminal-ui/build/index.es.js
var import_react = __toESM(require_react());
function a(n2, e2) {
  var t2 = "function" == typeof Symbol && n2[Symbol.iterator];
  if (!t2) return n2;
  var r2, a2, i2 = t2.call(n2), l2 = [];
  try {
    for (; (void 0 === e2 || e2-- > 0) && !(r2 = i2.next()).done; ) l2.push(r2.value);
  } catch (n3) {
    a2 = { error: n3 };
  } finally {
    try {
      r2 && !r2.done && (t2 = i2.return) && t2.call(i2);
    } finally {
      if (a2) throw a2.error;
    }
  }
  return l2;
}
var i = function(e2) {
  var t2 = e2.children, r2 = e2.prompt;
  return import_react.default.createElement("div", { className: "react-terminal-line react-terminal-input", "data-terminal-prompt": r2 || "$" }, t2);
};
var l = function(e2) {
  var t2 = e2.children;
  return import_react.default.createElement("div", { className: "react-terminal-line" }, t2);
};
!function(n2, e2) {
  void 0 === e2 && (e2 = {});
  var t2 = e2.insertAt;
  if (n2 && "undefined" != typeof document) {
    var r2 = document.head || document.getElementsByTagName("head")[0], a2 = document.createElement("style");
    a2.type = "text/css", "top" === t2 && r2.firstChild ? r2.insertBefore(a2, r2.firstChild) : r2.appendChild(a2), a2.styleSheet ? a2.styleSheet.cssText = n2 : a2.appendChild(document.createTextNode(n2));
  }
}("/**\n * Modfied version of [termynal.js](https://github.com/ines/termynal/blob/master/termynal.css).\n *\n * @author Ines Montani <ines@ines.io>\n * @version 0.0.1\n * @license MIT\n */\n .react-terminal-wrapper {\n  width: 100%;\n  background: #252a33;\n  color: #eee;\n  font-size: 18px;\n  font-family: 'Fira Mono', Consolas, Menlo, Monaco, 'Courier New', Courier, monospace;\n  border-radius: 4px;\n  padding: 75px 45px 35px;\n  position: relative;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n }\n\n.react-terminal {\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n}\n\n.react-terminal-wrapper.react-terminal-light {\n  background: #ddd;\n  color: #1a1e24;\n}\n\n.react-terminal-window-buttons {\n  position: absolute;\n  top: 15px;\n  left: 15px;\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n}\n\n.react-terminal-window-buttons button {\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n  border: 0;\n}\n\n.react-terminal-window-buttons button.clickable {\n  cursor: pointer;\n}\n\n.react-terminal-window-buttons button.red-btn {\n  background: #d9515d;\n}\n\n.react-terminal-window-buttons button.yellow-btn {\n  background: #f4c025;\n}\n\n.react-terminal-window-buttons button.green-btn {\n  background: #3ec930;\n}\n\n.react-terminal-wrapper:after {\n  content: attr(data-terminal-name);\n  position: absolute;\n  color: #a2a2a2;\n  top: 5px;\n  left: 0;\n  width: 100%;\n  text-align: center;\n  pointer-events: none;\n}\n\n.react-terminal-wrapper.react-terminal-light:after {\n  color: #D76D77;\n}\n\n.react-terminal-line {\n  white-space: pre;\n}\n\n.react-terminal-line:before {\n  /* Set up defaults and ensure empty lines are displayed. */\n  content: '';\n  display: inline-block;\n  vertical-align: middle;\n  color: #a2a2a2;\n}\n\n.react-terminal-light .react-terminal-line:before {\n  color: #D76D77;\n}\n\n.react-terminal-input:before {\n  margin-right: 0.75em;\n  content: '$';\n}\n\n.react-terminal-input[data-terminal-prompt]:before {\n  content: attr(data-terminal-prompt);\n}\n\n.react-terminal-wrapper:focus-within .react-terminal-active-input .cursor {\n  position: relative;\n  display: inline-block;\n  width: 0.55em;\n  height: 1em;\n  top: 0.225em;\n  background: #fff;\n  -webkit-animation: blink 1s infinite;\n          animation: blink 1s infinite;\n}\n\n/* Cursor animation */\n\n@-webkit-keyframes blink {\n  50% {\n      opacity: 0;\n  }\n}\n\n@keyframes blink {\n  50% {\n      opacity: 0;\n  }\n}\n\n.terminal-hidden-input {\n    position: fixed;\n    left: -1000px;\n}\n\n/* .react-terminal-progress {\n  display: flex;\n  margin: .5rem 0;\n}\n\n.react-terminal-progress-bar {\n  background-color: #fff;\n  border-radius: .25rem;\n  width: 25%;\n}\n\n.react-terminal-wrapper.react-terminal-light .react-terminal-progress-bar {\n  background-color: #000;\n} */\n");
var o;
var c = function(e2) {
  var t2 = e2.redBtnCallback, r2 = e2.yellowBtnCallback, a2 = e2.greenBtnCallback;
  return import_react.default.createElement("div", { className: "react-terminal-window-buttons" }, import_react.default.createElement("button", { className: "".concat(r2 ? "clickable" : "", " red-btn"), disabled: !t2, onClick: t2 }), import_react.default.createElement("button", { className: "".concat(r2 ? "clickable" : "", " yellow-btn"), disabled: !r2, onClick: r2 }), import_react.default.createElement("button", { className: "".concat(a2 ? "clickable" : "", " green-btn"), disabled: !a2, onClick: a2 }));
};
!function(n2) {
  n2[n2.Light = 0] = "Light", n2[n2.Dark = 1] = "Dark";
}(o || (o = {}));
var d = function(i2) {
  var l2 = i2.name, d2 = i2.prompt, s = i2.height, m = void 0 === s ? "600px" : s, u = i2.colorMode, p = i2.onInput, f = i2.children, b = i2.startingInputValue, y = void 0 === b ? "" : b, h = i2.redBtnCallback, v = i2.yellowBtnCallback, w = i2.greenBtnCallback, g = i2.TopButtonsPanel, k = void 0 === g ? c : g, x = a((0, import_react.useState)(""), 2), C = x[0], E = x[1], S = a((0, import_react.useState)(0), 2), N = S[0], B = S[1], D = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(function() {
    E(y.trim());
  }, [y]), (0, import_react.useEffect)(function() {
    var n2, e2;
    if (null != p) {
      var t2 = [], r2 = function(n3) {
        var e3 = function() {
          var e4;
          return null === (e4 = null == n3 ? void 0 : n3.querySelector(".terminal-hidden-input")) || void 0 === e4 ? void 0 : e4.focus();
        };
        null == n3 || n3.addEventListener("click", e3), t2.push({ terminalEl: n3, listener: e3 });
      };
      try {
        for (var a2 = function(n3) {
          var e3 = "function" == typeof Symbol && Symbol.iterator, t3 = e3 && n3[e3], r3 = 0;
          if (t3) return t3.call(n3);
          if (n3 && "number" == typeof n3.length) return { next: function() {
            return n3 && r3 >= n3.length && (n3 = void 0), { value: n3 && n3[r3++], done: !n3 };
          } };
          throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }(document.getElementsByClassName("react-terminal-wrapper")), i3 = a2.next(); !i3.done; i3 = a2.next()) {
          r2(i3.value);
        }
      } catch (e3) {
        n2 = { error: e3 };
      } finally {
        try {
          i3 && !i3.done && (e2 = a2.return) && e2.call(a2);
        } finally {
          if (n2) throw n2.error;
        }
      }
      return function() {
        t2.forEach(function(n3) {
          n3.terminalEl.removeEventListener("click", n3.listener);
        });
      };
    }
  }, [p]);
  var T = ["react-terminal-wrapper"];
  return u === o.Light && T.push("react-terminal-light"), import_react.default.createElement("div", { className: T.join(" "), "data-terminal-name": l2 }, import_react.default.createElement(k, { redBtnCallback: h, yellowBtnCallback: v, greenBtnCallback: w }), import_react.default.createElement("div", { className: "react-terminal", style: { height: m } }, f, "function" == typeof p && import_react.default.createElement("div", { className: "react-terminal-line react-terminal-input react-terminal-active-input", "data-terminal-prompt": d2 || "$", key: "terminal-line-prompt" }, C, import_react.default.createElement("span", { className: "cursor", style: { left: "".concat(N + 1, "px") } })), import_react.default.createElement("div", { ref: D })), import_react.default.createElement("input", { className: "terminal-hidden-input", placeholder: "Terminal Hidden Input", value: C, autoFocus: null != p, onChange: function(n2) {
    E(n2.target.value);
  }, onKeyDown: function(n2) {
    var e2, t2, r2;
    if (p) {
      if ("Enter" === n2.key) p(C), B(0), E(""), setTimeout(function() {
        var n3;
        return null === (n3 = null == D ? void 0 : D.current) || void 0 === n3 ? void 0 : n3.scrollIntoView({ behavior: "auto", block: "nearest" });
      }, 500);
      else if (["ArrowLeft", "ArrowRight", "ArrowDown", "ArrowUp", "Delete"].includes(n2.key)) {
        var a2 = n2.currentTarget, i3 = "", l3 = C.length - (a2.selectionStart || 0);
        e2 = l3, t2 = 0, r2 = C.length, l3 = e2 > r2 ? r2 : e2 < t2 ? t2 : e2, "ArrowLeft" === n2.key ? (l3 > C.length - 1 && l3--, i3 = C.slice(C.length - 1 - l3)) : "ArrowRight" === n2.key || "Delete" === n2.key ? i3 = C.slice(C.length - l3 + 1) : "ArrowUp" === n2.key && (i3 = C.slice(0));
        var o2 = function(n3, e3) {
          var t3 = document.createElement("span");
          t3.style.visibility = "hidden", t3.style.position = "absolute", t3.style.fontSize = window.getComputedStyle(n3).fontSize, t3.style.fontFamily = window.getComputedStyle(n3).fontFamily, t3.innerText = e3, document.body.appendChild(t3);
          var r3 = t3.getBoundingClientRect().width;
          return document.body.removeChild(t3), -r3;
        }(a2, i3);
        B(o2);
      }
    }
  } }));
};
export {
  o as ColorMode,
  i as TerminalInput,
  l as TerminalOutput,
  d as default
};
//# sourceMappingURL=react-terminal-ui.js.map
